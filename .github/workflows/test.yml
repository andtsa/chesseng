name: test

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, labeled]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'release') && !contains(github.event.pull_request.labels.*.name, 'ready') && (contains(github.event.pull_request.labels.*.name, 'draft') || github.event.pull_request.reviewers == '') }}
    runs-on: ubuntu-latest

    steps:
      - name: Prepare
        uses: actions/checkout@v4
      - name: Gather rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Build
        run: cargo build --verbose

  test_lint:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'release') && !contains(github.event.pull_request.labels.*.name, 'ready') && (contains(github.event.pull_request.labels.*.name, 'draft') || github.event.pull_request.reviewers == '') }}
    runs-on: ubuntu-latest

    steps:
      - name: Prepare
        uses: actions/checkout@v4
      - name: Gather rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rustfmt

      - name: Formatting
        run: cargo fmt -- --check

      - name: Clippy
        run: cargo clippy --release --no-deps --all-targets -- -D warnings

      - name: Report
        run: cargo test --release -vv

  benches:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'release') && !contains(github.event.pull_request.labels.*.name, 'ready') && (contains(github.event.pull_request.labels.*.name, 'draft') || github.event.pull_request.reviewers == '') }}
    runs-on: ubuntu-latest

    steps:
      - name: Prepare
        uses: actions/checkout@v4

      - name: Gather rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: apt install valgrind
        run: |
          sudo apt-get -y install valgrind

      - name: Checkout PR's Target Branch
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout ${{ github.base_ref }}

      - name: Run baseline benchmarks
        run: |
          RUST_BACKTRACE="full" cargo bench --no-fail-fast -- --nocapture || echo "baseline benches failed, continuing anyway..."

      - name: Checkout source branch
        run: |
          git fetch origin ${{ github.head_ref }} 
          git checkout ${{ github.head_ref }}   

      - name: Iterative Deepening Search
        run: |
          mkdir -p ./target/tmp
          RUST_BACKTRACE="full" cargo bench --bench id > ./target/tmp/id_bench.out

      - name: Read Output File
        id: read-id-output
        run: |
          cat ./target/tmp/id_bench.out
          content=$(base64 -w 0 ./target/tmp/id_bench.out) # Single-line base64 output
          echo "content=$content" >> $GITHUB_ENV

      - name: Post Comment with Benchmark Results
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const decodedContent = Buffer.from(process.env.content, 'base64').toString('utf-8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Search benchmark results:\n\`\`\`\n${decodedContent}\n\`\`\``
            });

      - name: Negamax Search
        run: |
          mkdir -p ./target/tmp
          RUST_BACKTRACE="full" cargo bench --bench ngm > ./target/tmp/ngm_bench.out

      - name: Read Output File
        id: read-ngm-output
        run: |
          cat ./target/tmp/ngm_bench.out
          content=$(base64 -w 0 ./target/tmp/ngm_bench.out) # Single-line base64 output
          echo "content=$content" >> $GITHUB_ENV

      - name: Post Comment with Benchmark Results
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const decodedContent = Buffer.from(process.env.content, 'base64').toString('utf-8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Negamax benchmark results:\n\`\`\`\n${decodedContent}\n\`\`\``
            });

      - name: Evaluation Function
        run: |
          RUST_BACKTRACE="full" cargo bench --bench eval > ./target/tmp/eval_bench.out

      - name: Evaluation Cachegrind
        run: |
          RUST_BACKTRACE="full" cargo bench --bench eval_grind >> ./target/tmp/eval_bench.out || echo "cachegrind bench failed, continuing anyway..."

      - name: Read Output File
        id: read-eval-output
        run: |
          cat ./target/tmp/eval_bench.out
          content=$(base64 -w 0 ./target/tmp/eval_bench.out) # Single-line base64 output
          echo "content=$content" >> $GITHUB_ENV

      - name: Post Comment with Benchmark Results
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const decodedContent = Buffer.from(process.env.content, 'base64').toString('utf-8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Evaluation benchmark results:\n\`\`\`\n${decodedContent}\n\`\`\``
            });

      - name: Move Generation
        run: |
          mkdir -p ./target/tmp
          RUST_BACKTRACE="full" cargo bench --bench mg > ./target/tmp/mg_bench.out 


      - name: MoveGen Cachegrind
        run: |
          RUST_BACKTRACE="full" cargo bench --bench mg_grind >> ./target/tmp/mg_bench.out || echo "cachegrind bench failed, continuing anyway..."


      - name: Read Output File
        id: read-mg-output
        run: |
          cat ./target/tmp/mg_bench.out
          content=$(base64 -w 0 ./target/tmp/mg_bench.out) # Single-line base64 output
          echo "content=$content" >> $GITHUB_ENV

      - name: Post Comment with Benchmark Results
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const decodedContent = Buffer.from(process.env.content, 'base64').toString('utf-8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `MoveGen benchmark results:\n\`\`\`\n${decodedContent}\n\`\`\``
            });

  integration_depth_bench:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'release') && !contains(github.event.pull_request.labels.*.name, 'ready') && (contains(github.event.pull_request.labels.*.name, 'draft') || github.event.pull_request.reviewers == '') }}
    runs-on: ubuntu-latest

    steps:
      - name: Prepare
        uses: actions/checkout@v4

      - name: Gather rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Checkout PR's Target Branch
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout ${{ github.base_ref }}

      - name: Compile tests
        run: |
          cargo test --test d6 --no-run;
          cargo test --test prune --no-run

      - name: Run baseline integration benchmark
        run: |
          mkdir -p ./target/tmp
          echo "d6 on TARGET branch:" > ./target/tmp/d6.out
          echo "--------------------" >> ./target/tmp/d6.out
          cargo test --test d6 -- --nocapture &>> ./target/tmp/d6.out || echo "baseline bench failed, continuing anyway..." 
          echo "prune on TARGET branch:" > ./target/tmp/p.out
          echo "-----------------------" >> ./target/tmp/p.out
          cargo test --test prune -- --nocapture &>> ./target/tmp/p.out || echo "baseline bench failed, continuing anyway..." 

      - name: Checkout source branch
        run: |
          git fetch origin ${{ github.head_ref }} 
          git checkout ${{ github.head_ref }}   

      - name: Run integration benchmark on new code
        run: |
          echo "********************" >> ./target/tmp/d6.out
          echo " "                    >> ./target/tmp/d6.out
          echo "d6 on SOURCE branch:" >> ./target/tmp/d6.out
          echo "--------------------" >> ./target/tmp/d6.out
          cargo test --test d6 -- --nocapture &>> ./target/tmp/d6.out
          echo "***********************" >> ./target/tmp/p.out
          echo " "                    >> ./target/tmp/p.out
          echo "prune on SOURCE branch:" >> ./target/tmp/p.out
          echo "-----------------------" >> ./target/tmp/p.out
          cargo test --test prune -- --nocapture &>> ./target/tmp/p.out

      - name: Read Output File
        id: read-id-output
        run: |
          cat ./target/tmp/d6.out
          content=$(base64 -w 0 ./target/tmp/d6.out) # Single-line base64 output
          echo "content=$content" >> $GITHUB_ENV

      - name: Post Comment with Benchmark Results
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const decodedContent = Buffer.from(process.env.content, 'base64').toString('utf-8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `d6 benchmark results:\n\`\`\`\n${decodedContent}\n\`\`\``
            });

      - name: Read Output File 2
        id: read-prune-output
        run: |
          cat ./target/tmp/p.out
          content=$(base64 -w 0 ./target/tmp/p.out) # Single-line base64 output
          echo "content=$content" >> $GITHUB_ENV

      - name: Post Comment with Benchmark Results
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const decodedContent = Buffer.from(process.env.content, 'base64').toString('utf-8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `prune benchmark results:\n\`\`\`\n${decodedContent}\n\`\`\``
            });

  integration_time_bench:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'release') && !contains(github.event.pull_request.labels.*.name, 'ready') && (contains(github.event.pull_request.labels.*.name, 'draft') || github.event.pull_request.reviewers == '') }}
    runs-on: ubuntu-latest

    steps:
      - name: Prepare
        uses: actions/checkout@v4

      - name: Gather rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Checkout PR's Target Branch
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout ${{ github.base_ref }}

      - name: Compile tests
        run: |
          cargo test --test 1m --no-run || echo "source branch is missing this test"

      - name: Run baseline integration benchmark
        run: |
          mkdir -p ./target/tmp
          echo "1m on TARGET branch:" > ./target/tmp/1m.out
          echo "--------------------" >> ./target/tmp/1m.out
          cargo test --test 1m -- --nocapture &>> ./target/tmp/1m.out || echo "baseline bench failed, continuing anyway..." 

      - name: Checkout source branch
        run: |
          git fetch origin ${{ github.head_ref }} 
          git checkout ${{ github.head_ref }}   

      - name: Run integration benchmark on new code
        run: |
          echo "********************" >> ./target/tmp/1m.out
          echo " "                    >> ./target/tmp/1m.out
          echo "1m on SOURCE branch:" >> ./target/tmp/1m.out
          echo "--------------------" >> ./target/tmp/1m.out
          cargo test --test 1m -- --nocapture &>> ./target/tmp/1m.out

      - name: Read Output File
        id: read-id-output
        run: |
          cat ./target/tmp/1m.out
          content=$(base64 -w 0 ./target/tmp/1m.out) # Single-line base64 output
          echo "content=$content" >> $GITHUB_ENV

      - name: Post Comment with Benchmark Results
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const decodedContent = Buffer.from(process.env.content, 'base64').toString('utf-8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `1m benchmark results:\n\`\`\`\n${decodedContent}\n\`\`\``
            });


